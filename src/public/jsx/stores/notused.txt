	ver async then concat 2
	@action async Retrieve() {
		this.isLoading = true;
		axios
			.get('/sets')
			.then(response => {
				const todos = response.data;

				const todoRequests = todos.map(todo =>
					axios
						.get(`/sets/${todo.id}/tasks`)
						.then(response => ({ ...todo, tasks: response.data }))
				);
				return Promise.all(todoRequests);
			})
			.then(todosWithTasks => {
				console.log(todosWithTasks);
				console.log(JSON.stringify(todosWithTasks));
				runInAction(() => {
					this.todos = todosWithTasks;
					this.isLoading = false;
				});
			})
			.catch(error => {
				this.setState({
					isLoading: false,
					errorMsg: 'Error loading todos',
					error
				});
			});
	}
	ver async then concat => tempTodostasks - 3 (tablica pomicnicza)
	@action async Retrieve() {
		this.isLoading = true;
		await axios
			.get('/sets')
			.then(async response => {
				let tempTodos = response.data;
				tempTodos.forEach(todo => (todo.editing = false));
				tempTodos.forEach(todo => (todo.task = []));
				tempTodos.map(todo => {
					axios
						.get('/sets/' + todo.id + '/tasks')
						.then(response2 => {
							todo.task = response2.data;
							todo.task.forEach(todo => (todo.editing = false));
							runInAction(() => {
								this.isLoading = true;
								this.tempTodostasks.push(todo);
								this.isLoading = true;
							});
						})
						.catch(error => {
							console.log(error);
						});
				});
			})
			.catch(error => {
				console.log(error);
			});
		runInAction(() => {
			this.setData(this.tempTodostasks);
			this.isLoading = false;
			this.tempTodostasks.slice(1);
		});
	}

	ver async then one json api - 4
	@action async Retrieve() {
		this.isLoading = true;
		await axios
			.get('sets/all')
			.then(response => {
				let tempTodos = response.data;
				//tempTodos.forEach(todo => (todo.editing = false));
				tempTodos.map(todo => {
					todo.editing = false;
					todo.tasks.map(todo => {
						todo.editing = false;
					});
				});

				runInAction(() => {
					this.todos = tempTodos;
					this.isLoading = false;
					//console.log(JSON.stringify(tempTodos));
				});
			})
			.catch(error => {
				console.log(error);
			});
	}